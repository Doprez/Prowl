#pragma kernel SkinFull

#pragma kernel SkinVertex
#pragma kernel SkinVertexNormal
#pragma kernel SkinVertexTangent

int BufferLength;

StructuredBuffer<float> InPositions;
StructuredBuffer<float> InNormals;
StructuredBuffer<float> InTangents;

RWStructuredBuffer<float> OutPositions;
RWStructuredBuffer<float> OutNormals;
RWStructuredBuffer<float> OutTangents;

StructuredBuffer<int4> BoneIndices;
StructuredBuffer<float4> BoneWeights;

StructuredBuffer<float4x4> BindPoses;
StructuredBuffer<float4x4> BoneTransforms;


#define SKIN_LOOP_BEGIN \
for (int i = 0; i < 4; i++) \
{ \
	int index = boneIndices[i] - 1; \
\
	if (index < 0) \
	    continue; \
\
	float weight = boneWeights[i]; \
	float4x4 boneTransform = mul(BoneTransforms[index], BindPoses[index]); \
    float3x3 boneRotation = float3x3(boneTransform[0].xyz, boneTransform[1].xyz, boneTransform[2].xyz);

#define SKIN_LOOP_END }

#define GET_VERTEX(id, buffer) float3(buffer[id * 3], buffer[(id * 3) + 1], buffer[(id * 3) + 2]);

#define SET_VERTEX(id, buffer, value) buffer[id * 3] = value.x; buffer[(id * 3) + 1] = value.y; buffer[(id * 3) + 2] = value.z;


[numthreads(64, 1, 1)]
void SkinFull(uint id : SV_DispatchThreadID)
{
    if (id >= BufferLength)
        return;

    float3 vertexPosition = GET_VERTEX(id, InPositions);
    float3 vertexNormal = GET_VERTEX(id, InNormals);
    float3 vertexTangent = GET_VERTEX(id, InTangents);

    int4 boneIndices = BoneIndices[id];
    float4 boneWeights = BoneWeights[id];

    float3 totalPosition = 0;
    float3 totalNormal = 0;
    float3 totalTangent = 0;

	SKIN_LOOP_BEGIN
	    totalPosition += mul(boneTransform, float4(vertexPosition, 1.0)).xyz * weight;
	    totalNormal += mul(boneRotation, vertexNormal.xyz) * weight;
	    totalTangent += mul(boneRotation, vertexTangent.xyz) * weight;
	SKIN_LOOP_END

	SET_VERTEX(id, OutPositions, totalPosition);
	SET_VERTEX(id, OutNormals, normalize(totalNormal));
	SET_VERTEX(id, OutTangents, normalize(totalTangent));
}


[numthreads(64, 1, 1)]
void SkinVertex(uint id : SV_DispatchThreadID)
{
    if (id >= BufferLength)
        return;

    float3 vertexPosition = GET_VERTEX(id, InPositions);

    int4 boneIndices = BoneIndices[id];
    float4 boneWeights = BoneWeights[id];

    float3 totalPosition = 0;

	SKIN_LOOP_BEGIN
	    totalPosition += mul(boneTransform, float4(vertexPosition, 1.0)).xyz * weight;
	SKIN_LOOP_END

	SET_VERTEX(id, OutPositions, totalPosition);
}


[numthreads(64, 1, 1)]
void SkinVertexNormal(uint id : SV_DispatchThreadID)
{
    if (id >= BufferLength)
        return;

    float3 vertexPosition = GET_VERTEX(id, InPositions);
    float3 vertexNormal = GET_VERTEX(id, InNormals);

    int4 boneIndices = BoneIndices[id];
    float4 boneWeights = BoneWeights[id];

    float3 totalPosition = 0;
    float3 totalNormal = 0;

	SKIN_LOOP_BEGIN
	    totalPosition += mul(boneTransform, float4(vertexPosition, 1.0)).xyz * weight;
	    totalNormal += mul(boneRotation, vertexNormal.xyz) * weight;
	SKIN_LOOP_END

	SET_VERTEX(id, OutPositions, totalPosition);
	SET_VERTEX(id, OutNormals, normalize(totalNormal));
}


[numthreads(64, 1, 1)]
void SkinVertexTangent(uint id : SV_DispatchThreadID)
{
    if (id >= BufferLength)
        return;

    float3 vertexPosition = GET_VERTEX(id, InPositions);
    float3 vertexTangent = GET_VERTEX(id, InTangents);

    int4 boneIndices = BoneIndices[id];
    float4 boneWeights = BoneWeights[id];

    float3 totalPosition = 0;
    float3 totalTangent = 0;

	SKIN_LOOP_BEGIN
	    totalPosition += mul(boneTransform, float4(vertexPosition, 1.0)).xyz * weight;
	    totalTangent += mul(boneRotation, vertexTangent) * weight;
	SKIN_LOOP_END

	SET_VERTEX(id, OutPositions, totalPosition);
	SET_VERTEX(id, OutTangents, normalize(totalTangent));
}
